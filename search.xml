<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关机病毒制作</title>
      <link href="2021/04/22/000-guan-ji-bing-du-zhi-zuo/"/>
      <url>2021/04/22/000-guan-ji-bing-du-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h4 id="步骤1：打开新建的记事本，输入“shutdown-p”命令，即自动重启本地计算机，保存，重命名文本文档为“腾讯QQ-bat”"><a href="#步骤1：打开新建的记事本，输入“shutdown-p”命令，即自动重启本地计算机，保存，重命名文本文档为“腾讯QQ-bat”" class="headerlink" title="步骤1：打开新建的记事本，输入“shutdown -p”命令，即自动重启本地计算机，保存，重命名文本文档为“腾讯QQ.bat”"></a>步骤1：打开新建的记事本，输入“shutdown -p”命令，即自动重启本地计算机，保存，重命名文本文档为“腾讯QQ.bat”</h4><p><img src="/2021/04/22/000-guan-ji-bing-du-zhi-zuo/image-20210425164750463.png"></p><h4 id="步骤2：右键单击“腾讯QQ-bat”图标，在弹出的菜单中单击“创建快捷方式命令”"><a href="#步骤2：右键单击“腾讯QQ-bat”图标，在弹出的菜单中单击“创建快捷方式命令”" class="headerlink" title="步骤2：右键单击“腾讯QQ.bat”图标，在弹出的菜单中单击“创建快捷方式命令”"></a>步骤2：右键单击“腾讯QQ.bat”图标，在弹出的菜单中单击“创建快捷方式命令”</h4><h4 id="步骤3：右键单击“腾讯QQ-bat-快捷方式”图标，在弹出的菜单中单击“属性”命令"><a href="#步骤3：右键单击“腾讯QQ-bat-快捷方式”图标，在弹出的菜单中单击“属性”命令" class="headerlink" title="步骤3：右键单击“腾讯QQ.bat-快捷方式”图标，在弹出的菜单中单击“属性”命令"></a>步骤3：右键单击“腾讯QQ.bat-快捷方式”图标，在弹出的菜单中单击“属性”命令</h4><h4 id="步骤4：切换至“快捷方式”选项卡，单击“更改图标”按钮，改成腾讯QQ的图标"><a href="#步骤4：切换至“快捷方式”选项卡，单击“更改图标”按钮，改成腾讯QQ的图标" class="headerlink" title="步骤4：切换至“快捷方式”选项卡，单击“更改图标”按钮，改成腾讯QQ的图标"></a>步骤4：切换至“快捷方式”选项卡，单击“更改图标”按钮，改成腾讯QQ的图标</h4><p><img src="/2021/04/22/000-guan-ji-bing-du-zhi-zuo/image-20210425162955428.png"></p><h4 id="步骤5：右键单击“腾讯QQ-bat”图标，在弹出的菜单中单击“属性”，切换到“常规”选项卡，勾选“隐藏”勾选框"><a href="#步骤5：右键单击“腾讯QQ-bat”图标，在弹出的菜单中单击“属性”，切换到“常规”选项卡，勾选“隐藏”勾选框" class="headerlink" title="步骤5：右键单击“腾讯QQ.bat”图标，在弹出的菜单中单击“属性”，切换到“常规”选项卡，勾选“隐藏”勾选框"></a>步骤5：右键单击“腾讯QQ.bat”图标，在弹出的菜单中单击“属性”，切换到“常规”选项卡，勾选“隐藏”勾选框</h4><p><img src="/2021/04/22/000-guan-ji-bing-du-zhi-zuo/image-20210425163106991.png"></p><h4 id="最终：可看到桌面上未显示“腾讯QQ-bat”图标，只显示了“腾讯QQ”图标，用户一旦双击该图标计算机便会关机"><a href="#最终：可看到桌面上未显示“腾讯QQ-bat”图标，只显示了“腾讯QQ”图标，用户一旦双击该图标计算机便会关机" class="headerlink" title="最终：可看到桌面上未显示“腾讯QQ.bat”图标，只显示了“腾讯QQ”图标，用户一旦双击该图标计算机便会关机"></a>最终：可看到桌面上未显示“腾讯QQ.bat”图标，只显示了“腾讯QQ”图标，用户一旦双击该图标计算机便会关机</h4><p><img src="/2021/04/22/000-guan-ji-bing-du-zhi-zuo/image-20210425165826248.png"></p><h4 id="关机相关命令介绍："><a href="#关机相关命令介绍：" class="headerlink" title="关机相关命令介绍："></a>关机相关命令介绍：</h4><p>一段时间后关机：shutdown -s -t 秒数效果是倒计时到该秒数后关机，例如shutdown -s -t 3600就是3600秒后关机，也就是一小时后关机</p><p>立即关机命令：shutdown -p关闭本地计算机，效果是马上关机，而不进行倒计时；也可以使用shutdown -s -t 0设置0秒后关机，也就是立即关机的意思</p><p>一段时间后重启：shutdown -r -t 秒数，效果是倒计时该秒数后重启，例如shutdown -r -t 0倒数0秒后重启，也就是立即重启的意思，如果没有加-t参数则会倒计时默认的秒数后关机，一般是一分钟</p><p>休眠命令：shutdown -h,这条指令让计算机休眠，也就是完全断电，但是会保存当前电脑的状态，下次启动时这些打开过的程序都还在。类似虚拟机的挂起功能</p><p>睡眠指令：睡眠和休眠的不同的地方是，睡眠没有完全掉电，电脑中其他的耗电部分都关闭，只留下内存供电，下次在唤醒电脑的时候，恢复到睡眠之前的状态。这点和休眠类似，睡眠的好处就是启动快。短时间离开电脑的话可以睡眠，如果时间间隔比较久的话用休眠。休眠和关机一样是不耗电的，而睡眠因为还有给内存供电，所以睡眠还是耗电的</p><p>启用屏幕保护：cmd下输入rundll32.exe user32.dll LockWorkStation，可以启动屏幕保护功能，这样要再次使用电脑的时候要输入密码。可以在短时间离开的时候，防止别人动你电脑</p><p>显示shutdown命令语法：输入shutdown -help显示shutdown指令的用法</p><p>shutdown -a表示取消关机，或者取消重启。在shutdown -s或者shutdown -r倒计时结束之前执行shutdown -a可以取消关机或者重启操作</p>]]></content>
      
      
      <categories>
          
          <category> 牛刀小试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑客尝试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下删除文件的几种方法及速度比较</title>
      <link href="2021/04/22/linux-xia-shan-chu-wen-jian-de-ji-chong-fang-fa-ji-su-du-bi-jiao/"/>
      <url>2021/04/22/linux-xia-shan-chu-wen-jian-de-ji-chong-fang-fa-ji-su-du-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p>场景：删除/tmp下的所有文件</p><p>方法一：直接使用rm</p><p>rm -f /tmp/*</p><p>方法二：使用find 和 rm</p><p>find /tmp/ -type f  -exec rm {} ;</p><p>方法三： 使用find</p><p>find /tmp/ -type f -delete</p><p>方法四：使用rsync</p><p>rsync是linux下文件同步和数据传输的命令。通过构造一个空文件夹并且和目标文件夹进行同步，就可以把目标文件夹的内容给删除了</p><p>mkdir blanktest<br>rsync –delete-before -d blanktest/  /tmp/</p>]]></content>
      
      
      <categories>
          
          <category> new </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题美化</title>
      <link href="2021/04/21/zhu-ti-mei-hua/"/>
      <url>2021/04/21/zhu-ti-mei-hua/</url>
      
        <content type="html"><![CDATA[<center>详情请见官方文档：<a herf="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></center><ul><li>待增添留言板功能</li></ul><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><ul><li>更改头像</li></ul><ul><li>修改关于页面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac怎样查看隐藏文件</title>
      <link href="2021/04/21/000mac-zen-yang-cha-kan-yin-cang-wen-jian/"/>
      <url>2021/04/21/000mac-zen-yang-cha-kan-yin-cang-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>现代人的隐私保护意识越来越强。而电脑做为日常生活和工作资料的储存箱，会存放很多涉及个人隐私的内容。所以有人喜欢在Mac上隐藏文件和文件夹，来保护自己的个人隐私。</p><p>但是隐藏之后，有些用户却不知道如何让隐藏文件再显示出来，今天就来教大家如何在Mac上显示隐藏文件的几种办法。</p><p>在我们说明办法之前，先普及一下隐藏文件的一些知识。</p><h2 id="什么是隐藏文件以及它们在Mac上的位置？"><a href="#什么是隐藏文件以及它们在Mac上的位置？" class="headerlink" title="什么是隐藏文件以及它们在Mac上的位置？"></a>什么是隐藏文件以及它们在Mac上的位置？</h2><p>其实在我们的电脑中，默认情况下就会有很多隐藏文件和文件夹。这样用户在使用的过程中就不会意外的将其删除或者修改他们。</p><p>因为这些默认隐藏的文件和文件夹都是一些支撑Mac运行的重要文件，总之是很重要的东西。</p><p>在Mac中，隐藏文件不会显示在正常的文件和文件夹列表中。它们以“.”命名。在他们的名字之前隐藏文件可以是任何类型，例如，它可以是.bash_profile，.htaccess文件或.svn目录。如果希望，还可以隐藏/ bin，/ usr和/ etc等文件夹。大多数隐藏的文件都存在于Library文件夹（〜/ Library）中。</p><h2 id="如何在Mac上显示隐藏文件？"><a href="#如何在Mac上显示隐藏文件？" class="headerlink" title="如何在Mac上显示隐藏文件？"></a>如何在Mac上显示隐藏文件？</h2><p>现在您已经了解了隐藏文件和文件夹的基本知识，那么隐藏文件和文件夹要怎么重新显示出来呢？</p><h3 id="方法1：使用Finder查看Mac隐藏文件"><a href="#方法1：使用Finder查看Mac隐藏文件" class="headerlink" title="方法1：使用Finder查看Mac隐藏文件"></a>方法1：使用Finder查看Mac隐藏文件</h3><p>在最新的macOS Sierra中，Apple包含了Finder快捷键。这允许用户快速显示隐藏的文件夹Mac。</p><p>操作步骤如下：</p><ul><li><p>打开Finder，然后点击主文件夹。您可以访问左栏中“设备”下的主文件夹。</p></li><li><p>按键盘键Cmd + Shift +。 （点）。只要按下此组合键，就会看到所有隐藏的文件夹和文件。</p><p><img src="/2021/04/21/000mac-zen-yang-cha-kan-yin-cang-wen-jian/finder.jpg"></p></li><li><p>如果您需要再次隐藏这些文件，您只需再次按下该组合即可。</p></li></ul><h3 id="方法2：直接在库中查找隐藏文件夹"><a href="#方法2：直接在库中查找隐藏文件夹" class="headerlink" title="方法2：直接在库中查找隐藏文件夹"></a>方法2：直接在库中查找隐藏文件夹</h3><p>还有一种办法是直接在〜/ Library文件夹中进行查找</p><ul><li><p>首先打开Finder。按Alt（选项）键。现在，从按下键后丢弃的菜单栏中选择Go。</p></li><li><p>您现在可以使用Home文件夹下面的〜/ Library文件夹。</p></li><li><p>您也可以转到Finder &gt;&gt; Go查看该文件夹。现在选择“转到文件夹”选项或只需按Shift + Cmd + G组合键。现在输入〜/ Library并点击Go。</p><p><img src="/2021/04/21/000mac-zen-yang-cha-kan-yin-cang-wen-jian/library.jpg"></p></li></ul><p>这将显示所有隐藏的文件和文件夹。此外，它还将授予您访问这些文件夹的权限。</p><h3 id="方法3：使用命令查找隐藏文件和文件夹"><a href="#方法3：使用命令查找隐藏文件和文件夹" class="headerlink" title="方法3：使用命令查找隐藏文件和文件夹"></a>方法3：使用命令查找隐藏文件和文件夹</h3><p>如果你还想尝试一些更极客的办法，那么你可以使用命令查找</p><p>如果你是一个极客并且非常清楚使用终端，那么这个解决方案可能会激发你的兴趣。您所要做的就是按照以下步骤进行操作。</p><ul><li><p>首先要打开终端。</p></li><li><p>在终端中，运行以下提到的脚本：</p></li><li><p>$ defaults写com.apple.Finder AppleShowAllFiles true $ killall Finder您的隐藏文件夹将可见。</p></li><li><p>如果要隐藏起来，只需要运行相同的脚本，将“true”值更改为“false”</p><p><img src="/2021/04/21/000mac-zen-yang-cha-kan-yin-cang-wen-jian/terminal.jpg"></p></li><li><p>如前所述，默认情况下会隐藏某些文件夹和文件。这是为了避免用户可能错误地对它们执行的修改。修改这些文件会损坏您的Mac系统，并且是不可逆的。</p></li><li><p>由于该过程不可逆转，所以在操作时需谨慎处理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac电脑使用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="2021/04/21/000-bo-ke-da-jian/"/>
      <url>2021/04/21/000-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h4 id="GitHub-pages设置"><a href="#GitHub-pages设置" class="headerlink" title="GitHub pages设置"></a>GitHub pages设置</h4><ol><li>注册GitHub账号</li><li>打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%EF%BC%9A">https://github.com/，新建一个项目：</a></li></ol><p><img src="/2021/04/21/000-bo-ke-da-jian/1.jpg"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上</p><p><strong>名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code></strong></p><p><img src="/2021/04/21/000-bo-ke-da-jian/2.jpg"></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="/2021/04/21/000-bo-ke-da-jian/3.jpg"></p><p>浏览器输入链接”yourname.github.io”，就会出现自己的网页啦，效果如下：</p><p><img src="/2021/04/21/000-bo-ke-da-jian/4.jpg"></p><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><ol><li><p>去官网下载最新稳定版<a href="https://nodejs.org/en/">Node.js</a></p></li><li><p>安装选项全部默认，一路点击<code>Next</code></p></li><li><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了</p></li></ol><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><ol><li><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[<a href="https://git-scm.com/download/win">下载地址]</a></p></li><li><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了</p></li><li><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功</p></li></ol><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><ol><li><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如存放在<code>D:\blog</code>目录下</p></li><li><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口（以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了）</p></li><li><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo（会有几个报错，无视它就行）</p></li><li><p>安装完后输入<code>hexo -v</code>验证是否安装成功</p></li><li><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件</p></li><li><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A%EF%BC%88%E6%8C%89%60ctrl+c%60%E5%85%B3%E9%97%AD%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89">http://localhost:4000/，就可以看到我们的博客啦，效果如下：（按`ctrl+c`关闭本地服务器）</a></p></li></ol><p><img src="/2021/04/21/000-bo-ke-da-jian/5.jpg"></p><h4 id="连接GitHub与本地"><a href="#连接GitHub与本地" class="headerlink" title="连接GitHub与本地"></a>连接GitHub与本地</h4><ol><li>首先右键打开git bash，然后输入下面命令：（用户名和邮箱根据你注册github的信息自行修改）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>然后生成密钥SSH key：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便</li></ol><blockquote><p>git bash中输入</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将输出的内容复制到框中，点击确定保存。</p></blockquote><ol start="4"><li>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了！</li></ol><p><img src="/2021/04/21/000-bo-ke-da-jian/6.jpg"></p><p>备注：打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息：</p><blockquote><p>修改最后一行的配置：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/godweiyang/godweiyang.github.io  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>repository修改为你自己的github项目地址</p></blockquote><h4 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h4><ol><li><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code></p></li><li><p>然后输入<code>hexo new &quot;article title&quot;</code>，新建一篇文章</p></li><li><p>然后打开<code>D:\blog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件，就是你的文章文件啦</p></li><li><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上，这时打开你的github.io主页就能看到发布的文章啦！</p></li></ol><h4 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h4><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？</p><p>想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了</p><blockquote><p>以我的百度云为例，如下图所示，添加两条解析记录：</p></blockquote><p><img src="/2021/04/21/000-bo-ke-da-jian/7.jpg"></p><blockquote><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p></blockquote><p><img src="/2021/04/21/000-bo-ke-da-jian/8.jpg"></p><blockquote><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\blog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存</p><p>最后运行<code>hexo g</code>、<code>hexo d</code>上传到github</p></blockquote><h4 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h4><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面</p><blockquote><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下</p></blockquote><blockquote><p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章初始化设置</title>
      <link href="2021/04/20/wen-zhang-chu-shi-hua-she-zhi/"/>
      <url>2021/04/20/wen-zhang-chu-shi-hua-she-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="初始化文章的Front-matter"><a href="#初始化文章的Front-matter" class="headerlink" title="初始化文章的Front-matter"></a>初始化文章的<code>Front-matter</code></h4><p>修改”/scaffolds/post.md”</p><center>初始状态</center><pre class="line-numbers language-none"><code class="language-none">title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>修改后的状态</center><pre class="line-numbers language-none"><code class="language-none">title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;top: true#推荐文章（文章是否置顶）如果 top 值为 true，则会作为首页推荐文章;不置顶则将该行删除cover: flase#版本新增，表示该文章是否需要加入到首页轮播封面中;默认关闭，不需要的话删除该行，需要的话将flase改成truesummary: this is the summary #文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要keywords: this is the keywords #文章关键字，SEO 时需要;默认为文章标题tags:- new#标签项，此项待修改categories: new#分类项，此项待修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*备注：author项已在根_config.yml中修改</p><h4 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h4><p>使用 markdown 语法插入相对路径的图片，可以利用插件。设置 <code>post_asset_folder:true</code> 后，在根目录下执行：</p><pre class="line-numbers language-none"><code class="language-none">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保在 source/_posts 下创建和 markdown 文件同名的目录，里面存放需要的图片，然后在 markdown 中插入图片：</p><pre class="line-numbers language-none"><code class="language-none">_posts    |- hexo.md    |_ hexo        |_ image.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">! [hexo image] (hexo&#x2F;image.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的页面中图片引用路径</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;&#x2F;2016&#x2F;11&#x2F;25&#x2F;hexo&#x2F;image.png&quot; alt&#x3D;&quot;hexo image&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，用 markdown 完美实现本地图片插入</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超链接居中</title>
      <link href="2021/04/20/000-chao-lian-jie-ju-zhong/"/>
      <url>2021/04/20/000-chao-lian-jie-ju-zhong/</url>
      
        <content type="html"><![CDATA[<p>*markdown本身不支持，但可以使用html：</p><ol><li>方法一：</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;center&gt;[链接名称](链接地址)&lt;&#x2F;center&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例：</p></blockquote><center>[链接名称](链接地址)</center><ol start="2"><li>方法二：</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;center&gt;&lt;a href&#x3D;链接地址&gt;链接名称&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例：</p></blockquote><center><a href="链接地址">链接名称</a></center><ol start="3"><li>方法三：</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;div align&#x3D;center &gt;&lt;a href&#x3D;链接地址&gt;链接名称&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>示例：</p></blockquote><div align="center"><a href="链接地址">链接名称</a></div><p>备注：方法一当有回车符时可能会失效</p>]]></content>
      
      
      <categories>
          
          <category> markdown编写技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超链接居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章Front-matter介绍</title>
      <link href="2021/04/20/000-wen-zhang-front-matter-jie-shao/"/>
      <url>2021/04/20/000-wen-zhang-front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<center> 详情请见官方说明文档：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a> </center><hr><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;top: true#推荐文章（文章是否置顶）如果 top 值为 true，则会作为首页推荐文章;不置顶则将该行删除cover: flase#版本新增，表示该文章是否需要加入到首页轮播封面中;默认关闭，不需要的话删除该行，需要的话将flase改成truesummary: this is the summary #文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:<span class="token list punctuation">-</span> new#标签项，此项待修改categories: new#分类项，此项待修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新文章格式设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写和发布新文章</title>
      <link href="2021/04/20/bian-xie-he-fa-bu-xin-wen-zhang/"/>
      <url>2021/04/20/bian-xie-he-fa-bu-xin-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h3 id="新建文章的方法"><a href="#新建文章的方法" class="headerlink" title="*新建文章的方法"></a>*新建文章的方法</h3><h5 id="1、进入博客目录，在-source-posts-文件夹下直接建立一个-md文件"><a href="#1、进入博客目录，在-source-posts-文件夹下直接建立一个-md文件" class="headerlink" title="1、进入博客目录，在 /source/_posts 文件夹下直接建立一个.md文件"></a>1、进入博客目录，在 /source/_posts 文件夹下直接建立一个.md文件</h5><h5 id="2、进入博客目录，右键选择-“-Git-Bash-Here-“-进入命令窗口，输入下面代码"><a href="#2、进入博客目录，右键选择-“-Git-Bash-Here-“-进入命令窗口，输入下面代码" class="headerlink" title="2、进入博客目录，右键选择 “ Git Bash Here “ 进入命令窗口，输入下面代码:"></a>2、进入博客目录，右键选择 “ Git Bash Here “ 进入命令窗口，输入下面代码:</h5><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;新建文章名称&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，在” /source/_posts”文件夹里便有了”新建文章名称.md”文件。</p><p>test01</p><span id="more"></span><h3 id="发布新建文章"><a href="#发布新建文章" class="headerlink" title="* 发布新建文章"></a>* 发布新建文章</h3><p>在该博客项目文件夹下右键选择 “ Git Bash Here “ 进入命令窗口，输入如下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意事项：</p><ul><li><p>部署到GitHub时，可能因为网速、被墙等原因，需要多次运行”hexo deploy”；也可以运行”hexo clean”后在运行上述代码</p></li><li><p>.md文件不要用记事本打开，建议使用具有markdown语法的程序打开</p></li></ul><!--more-->]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主题修改</title>
      <link href="2021/04/20/000-zhu-ti-xiu-gai/"/>
      <url>2021/04/20/000-zhu-ti-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h3 id="挑个好看的主题"><a href="#挑个好看的主题" class="headerlink" title="挑个好看的主题"></a>挑个好看的主题</h3><p>全凭个人喜好，在网上能找到很多好看的主题供你下载</p><p>知乎话题：<a href="https://www.zhihu.com/question/24422335">有哪些好看的 Hexo 主题？</a></p><p>Hexo官方：<a href="https://hexo.io/themes/">Themes</a></p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>用git bash，进入到博客的本地目录中：</p><pre class="line-numbers language-none"><code class="language-none">$ cd 你的博客目录路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/04/20/000-zhu-ti-xiu-gai/1460000012780333"></p><p>然后使用clone的方法将想要的主题下载下来：（这里选用的是NexT主题）</p><pre class="line-numbers language-none"><code class="language-none">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改配置文件，安装"><a href="#修改配置文件，安装" class="headerlink" title="修改配置文件，安装"></a>修改配置文件，安装</h3><p>git克隆完成后，打开当前目录下的“_config.yml”配置文件</p><p>找到theme的配置选项，一般在文件的最后</p><p>之后，将theme选项配置为我们新下载好的next主题即可（“：”冒号之后空格不可少）</p><p><img src="/2021/04/20/000-zhu-ti-xiu-gai/1460000012780334"></p><h3 id="调试，发布"><a href="#调试，发布" class="headerlink" title="调试，发布"></a>调试，发布</h3><p>回到git bash，输入调试命令：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo server --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图，在浏览器中输入localhost:4000查看：</p><p><img src="/2021/04/20/000-zhu-ti-xiu-gai/1460000012780335"></p><p>在本地查看无误之后，输入生成和发布命令,就可已将新主题发布到自己的博客网站上了</p><pre class="line-numbers language-none"><code class="language-none">$ hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*如出现缓存引起的异常，可以在生成命令前执行清除缓存命令：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>做完这些之后，就可以打开你的博客网站，查看新更换的主题效果！</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/04/20/linux-ming-ling-ji-lei/"/>
      <url>2021/04/20/linux-ming-ling-ji-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>test</p><p><em>斜体文本</em></p><p><strong>test</strong></p><p><em><strong>test</strong></em></p><hr><p><del>test</del></p><p>test</p><p><u>test</u></p><p>test000:<a href="%E6%B5%8B%E3%80%82%E3%80%82%E3%80%82%E3%80%82">^test</a></p><ul><li>test</li></ul><ol><li><p>test</p></li><li><p>第一项：</p><ul><li>第一个</li></ul></li><li><p>第二项</p><ul><li>第二个</li></ul></li></ol><blockquote><p>test01</p><blockquote><p>test02</p><blockquote><p>test03</p></blockquote></blockquote></blockquote><ul><li><p>第一项</p><blockquote><p>test</p></blockquote></li><li><p>第二项</p><blockquote><p>test</p></blockquote></li></ul><p><code>printf()</code>函数</p><p>​    print()</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="www.baidu.com">test</a></p><p>&lt;<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a></p><p><img src="../images/1.png" alt="test"></p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用技巧</title>
      <link href="2021/04/20/hexo/"/>
      <url>2021/04/20/hexo/</url>
      
        <content type="html"><![CDATA[<h5 id><a href="#" class="headerlink" title></a></h5>]]></content>
      
      
      <categories>
          
          <category> 个人博客设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/20/hello-world/"/>
      <url>2021/04/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
